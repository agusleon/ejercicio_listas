bool esta(Lista<string>* ingredientes, Lista<string>* lista_ingredientes_comida);

Lista<Alimento*>* comidas_para_celiacos(Lista<Alimento*>* comidas, Lista<string>* ingredientes_permitidos, Lista<string>* ingredientes_no_permitidos, unsigned caloria_max)
{
    Lista<Alimento>* celiacos = new Lista<Alimento*>;
	bool permitido = false;
	bool no_permitido = true;
	
	while ((comidas -> hay_siguiente()) && (!permitido || no_permitido))
	{
		actual = comidas -> siguiente();
		permitido = esta(ingredientes_permitidos, actual -> obtener_ingredientes()); //si devuelve true -> tiene algun ingrediente permitido
		no_permitido = esta(ingredientes_no_permitidos, actual -> obtener_ingredientes()); //si devuelve false -> no tiene ningun ingredientes no permitido
		
		if (permitido && !no permitido && (actual -> obtener_calorias()) <= caloria_max)
		{
			celiacos -> insertar(actual, celiacos -> obtener_tam() + 1);
		}
	}	
	return celiacos;
}

bool esta(Lista<string>* ingredientes, Lista<string>* lista_ingredientes_comida)
{
	bool esta = false;
	string actual;
	ingredientes -> reiniciar()
	lista_ingredientes_comida -> reiniciar()
	while(!esta && lista_ingredientes_comida -> hay_siguiente())
	{
		actual = lista_ingredientes_comida -> siguiente();
		while (!esta && ingredientes -> hay_siguiente())
		{
			if (actual == (ingredientes -> siguiente()))
			{
				esta = true;
			}
		}
		ingredientes -> reiniciar()
	}
	return esta;
}
